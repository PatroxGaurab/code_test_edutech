{
  "name": "express-jwt",
  "version": "3.4.0",
  "description": "JWT authentication middleware.",
  "keywords": [
    "auth",
    "authn",
    "authentication",
    "authz",
    "authorization",
    "http",
    "jwt",
    "token",
    "oauth",
    "express"
  ],
  "repository": {
    "type": "git",
    "url": "git://github.com/auth0/express-jwt.git"
  },
  "bugs": {
    "url": "http://github.com/auth0/express-jwt/issues"
  },
  "author": {
    "name": "Matias Woloski",
    "email": "matias@auth0.com",
    "url": "https://www.auth0.com/"
  },
  "licenses": [
    {
      "type": "MIT",
      "url": "http://www.opensource.org/licenses/MIT"
    }
  ],
  "main": "./lib",
  "dependencies": {
    "async": "^1.5.0",
    "express-unless": "^0.3.0",
    "jsonwebtoken": "^5.0.0",
    "lodash.set": "^4.0.0"
  },
  "devDependencies": {
    "mocha": "1.x.x"
  },
  "engines": {
    "node": ">= 0.4.0"
  },
  "scripts": {
    "test": "mocha --reporter spec"
  },
  "readme": "# express-jwt\n\n[![Build](https://travis-ci.org/auth0/express-jwt.png)](http://travis-ci.org/auth0/express-jwt)\n\nMiddleware that validates JsonWebTokens and sets `req.user`.\n\nThis module lets you authenticate HTTP requests using JWT tokens in your Node.js\napplications.  JWTs are typically used to protect API endpoints, and are\noften issued using OpenID Connect.\n\n## Install\n\n    $ npm install express-jwt\n\n## Usage\n\nThe JWT authentication middleware authenticates callers using a JWT.\nIf the token is valid, `req.user` will be set with the JSON object decoded\nto be used by later middleware for authorization and access control.\n\nFor example,\n\n```javascript\nvar jwt = require('express-jwt');\n\napp.get('/protected',\n  jwt({secret: 'shhhhhhared-secret'}),\n  function(req, res) {\n    if (!req.user.admin) return res.sendStatus(401);\n    res.sendStatus(200);\n  });\n```\n\nYou can specify audience and/or issuer as well:\n\n```javascript\njwt({ secret: 'shhhhhhared-secret',\n  audience: 'http://myapi/protected',\n  issuer: 'http://issuer' })\n```\n\n> If the JWT has an expiration (`exp`), it will be checked.\n\nIf you are using a base64 URL-encoded secret, pass a `Buffer` with `base64` encoding as the secret instead of a string:\n\n```javascript\njwt({ secret: new Buffer('shhhhhhared-secret', 'base64') })\n```\n\nOptionally you can make some paths unprotected as follows:\n\n```javascript\napp.use(jwt({ secret: 'shhhhhhared-secret'}).unless({path: ['/token']}));\n```\n\nThis is especially useful when applying to multiple routes. In the example above, `path` can be a string, a regexp, or an array of any of those.\n\n> For more details on the `.unless` syntax including additional options, please see [express-unless](https://github.com/jfromaniello/express-unless).\n\nThis module also support tokens signed with public/private key pairs. Instead of a secret, you can specify a Buffer with the public key\n\n```javascript\nvar publicKey = fs.readFileSync('/path/to/public.pub');\njwt({ secret: publicKey });\n```\n\nBy default, the decoded token is attached to `req.user` but can be configured with the `requestProperty` option.\n\n\n```javascript\njwt({ secret: publicKey, requestProperty: 'auth' });\n```\n\nA custom function for extracting the token from a request can be specified with\nthe `getToken` option. This is useful if you need to pass the token through a\nquery parameter or a cookie. You can throw an error in this function and it will\nbe handled by `express-jwt`.\n\n```javascript\napp.use(jwt({\n  secret: 'hello world !',\n  credentialsRequired: false,\n  getToken: function fromHeaderOrQuerystring (req) {\n    if (req.headers.authorization && req.headers.authorization.split(' ')[0] === 'Bearer') {\n        return req.headers.authorization.split(' ')[1];\n    } else if (req.query && req.query.token) {\n      return req.query.token;\n    }\n    return null;\n  }\n}));\n```\n\n### Multi-tenancy\nIf you are developing an application in which the secret used to sign tokens is not static, you can provide a callback function as the `secret` parameter. The function has the signature: `function(req, payload, done)`:\n* `req` (`Object`) - The express `request` object.\n* `payload` (`Object`) - An object with the JWT claims.\n* `done` (`Function`) - A function with signature `function(err, secret)` to be invoked when the secret is retrieved.\n  * `err` (`Any`) - The error that occurred.\n  * `secret` (`String`) - The secret to use to verify the JWT.\n\nFor example, if the secret varies based on the [JWT issuer](http://self-issued.info/docs/draft-ietf-oauth-json-web-token.html#issDef):\n```javascript\nvar jwt = require('express-jwt');\nvar data = require('./data');\nvar utilities = require('./utilities');\n\nvar secretCallback = function(req, payload, done){\n  var issuer = payload.iss;\n\n  data.getTenantByIdentifier(issuer, function(err, tenant){\n    if (err) { return done(err); }\n    if (!tenant) { return done(new Error('missing_secret')); }\n\n    var secret = utilities.decrypt(tenant.secret);\n    done(null, secret);\n  });\n};\n\napp.get('/protected',\n  jwt({secret: secretCallback}),\n  function(req, res) {\n    if (!req.user.admin) return res.sendStatus(401);\n    res.sendStatus(200);\n  });\n```\n\n### Revoked tokens\nIt is possible that some tokens will need to be revoked so they cannot be used any longer. You can provide a function as the `isRevoked` option. The signature of the function is `function(req, payload, done)`:\n* `req` (`Object`) - The express `request` object.\n* `payload` (`Object`) - An object with the JWT claims.\n* `done` (`Function`) - A function with signature `function(err, revoked)` to be invoked once the check to see if the token is revoked or not is complete.\n  * `err` (`Any`) - The error that occurred.\n  * `revoked` (`Boolean`) - `true` if the JWT is revoked, `false` otherwise.\n\nFor example, if the `(iss, jti)` claim pair is used to identify a JWT:\n```javascript\nvar jwt = require('express-jwt');\nvar data = require('./data');\nvar utilities = require('./utilities');\n\nvar isRevokedCallback = function(req, payload, done){\n  var issuer = payload.iss;\n  var tokenId = payload.jti;\n\n  data.getRevokedToken(issuer, tokenId, function(err, token){\n    if (err) { return done(err); }\n    return done(null, !!token);\n  });\n};\n\napp.get('/protected',\n  jwt({secret: 'shhhhhhared-secret',\n    isRevoked: isRevokedCallback}),\n  function(req, res) {\n    if (!req.user.admin) return res.sendStatus(401);\n    res.sendStatus(200);\n  });\n```\n\n### Error handling\n\nThe default behavior is to throw an error when the token is invalid, so you can add your custom logic to manage unauthorized access as follows:\n\n\n```javascript\napp.use(function (err, req, res, next) {\n  if (err.name === 'UnauthorizedError') {\n    res.status(401).send('invalid token...');\n  }\n});\n```\n\nYou might want to use this module to identify registered users while still providing access to unregistered users. You\ncan do this by using the option _credentialsRequired_:\n\n    app.use(jwt({\n      secret: 'hello world !',\n      credentialsRequired: false\n    }));\n\n## Related Modules\n\n- [jsonwebtoken](https://github.com/auth0/node-jsonwebtoken) â€” JSON Web Token sign and verification\n\n## Tests\n\n    $ npm install\n    $ npm test\n\n## Contributors\nCheck them out [here](https://github.com/auth0/express-jwt/graphs/contributors)\n\n## Issue Reporting\n\nIf you have found a bug or if you have a feature request, please report them at this repository issues section. Please do not report security vulnerabilities on the public GitHub issue tracker. The [Responsible Disclosure Program](https://auth0.com/whitehat) details the procedure for disclosing security issues.\n\n## Author\n\n[Auth0](auth0.com)\n\n## License\n\nThis project is licensed under the MIT license. See the [LICENSE](LICENSE) file for more info.\n",
  "readmeFilename": "README.md",
  "homepage": "https://github.com/auth0/express-jwt",
  "_id": "express-jwt@3.4.0",
  "_from": "express-jwt@^3.0.1"
}

{
  "name": "gulp-ng-html2js",
  "version": "0.2.2",
  "description": "A Gulp plugin which generates AngularJS modules, which pre-load your HTML code into the $templateCache. This way AngularJS doesn't need to request the actual HTML files anymore.",
  "keywords": [
    "gulpplugin",
    "ng-html2js",
    "angular",
    "html2js",
    "angularjs"
  ],
  "homepage": "https://github.com/marklagendijk/gulp-ng-html2js",
  "bugs": {
    "url": "https://github.com/marklagendijk/gulp-ng-html2js/issues"
  },
  "author": {
    "name": "Mark Lagendijk",
    "email": "mark@lagendijk.info",
    "url": "https://github.com/marklagendijk"
  },
  "main": "./index.js",
  "repository": {
    "type": "git",
    "url": "git://github.com/marklagendijk/gulp-ng-html2js.git"
  },
  "scripts": {
    "test": "mocha"
  },
  "dependencies": {
    "gulp-util": "*",
    "lodash": "^3.3.0",
    "map-stream": "*"
  },
  "devDependencies": {
    "mocha": "~1.14.0",
    "should": "~2.1.0",
    "event-stream": "~3.0.20"
  },
  "engines": {
    "node": ">=0.8.0",
    "npm": ">=1.2.10"
  },
  "licenses": [
    {
      "type": "MIT"
    }
  ],
  "readme": "# gulp-ng-html2js [![NPM version][npm-image]][npm-url] [![Build Status][travis-image]][travis-url] [![Dependency Status][depstat-image]][depstat-url]\r\n\r\n> A plugin for [gulp](https://github.com/wearefractal/gulp) which generates AngularJS modules, which pre-load your HTML\r\ncode into the [$templateCache](http://docs.angularjs.org/api/ng.$templateCache). This way AngularJS doesn't need to\r\nrequest the actual HTML files anymore.\r\n\r\n## Usage\r\n\r\nFirst, install `gulp-ng-html2js` as a development dependency:\r\n\r\n```shell\r\nnpm install --save-dev gulp-ng-html2js\r\n```\r\n\r\nThen, add it to your `gulpfile.js`:\r\n\r\n```javascript\r\nvar ngHtml2Js = require(\"gulp-ng-html2js\");\r\n\r\ngulp.src(\"./partials/*.html\")\r\n\t.pipe(ngHtml2Js({\r\n\t\tmoduleName: \"MyAwesomePartials\",\r\n\t\tprefix: \"/partials\"\r\n\t}))\r\n\t.pipe(gulp.dest(\"./dist/partials\"));\r\n```\r\n\r\nThe main reason to use this module would be optimization. By pre-loading the HTML files, you can spare requests and\r\nloading time when the files are actually needed. When you are optimizing, you should do it properly. So, we should add\r\nthe following plugins: `gulp-minify-html`, `gulp-uglify`, and `gulp-concat`:\r\n\r\n```javascript\r\nvar ngHtml2Js = require(\"gulp-ng-html2js\");\r\nvar minifyHtml = require(\"gulp-minify-html\");\r\nvar concat = require(\"gulp-concat\");\r\nvar uglify = require(\"gulp-uglify\");\r\n\r\ngulp.src(\"./partials/*.html\")\r\n\t.pipe(minifyHtml({\r\n\t\tempty: true,\r\n\t\tspare: true,\r\n\t\tquotes: true\r\n\t}))\r\n\t.pipe(ngHtml2Js({\r\n\t\tmoduleName: \"MyAwesomePartials\",\r\n\t\tprefix: \"/partials\"\r\n\t}))\r\n\t.pipe(concat(\"partials.min.js\"))\r\n\t.pipe(uglify())\r\n\t.pipe(gulp.dest(\"./dist/partials\"));\r\n```\r\n\r\nThis way you end up with 1 single, minified Javascript file, which pre-loads all the (minified) HTML templates.\r\n\r\nIf you have your modules sorted into directories that match the module name, you could do something like this:\r\n\r\n```javascript\r\n// This picks up files like this:\r\n//   partials/date-picker/year.html (as well as month.html, day.html)\r\n//   partials/expanded-combo-box/combobox.html\r\n//   partials/forms/feedback.html (as well as survey.html, contact.html)\r\n// Returns modules like this:\r\n//   datePicker, expandedComboBox, forms\r\ngulp.src(\"./partials/**/*.html\")\r\n    .pipe(ngHtml2Js({\r\n\t\tmoduleName: function (file) {\r\n\t\t\tvar pathParts = file.path.split('/');\r\n\t\t\tvar folder = pathParts[pathParts.length - 2];\r\n\t\t\treturn folder.replace(/-[a-z]/g, function (match) {\r\n\t\t\t\treturn match.substr(1).toUpperCase();\r\n\t\t\t});\r\n\t\t}\r\n\t}))\r\n\t.pipe(concat(\"partials.min.js\"))\r\n\t.pipe(gulp.dest('./dist/partials'));\r\n}\r\n```\r\n\r\n## API\r\n\r\n### ngHtml2Js(options)\r\n\r\n#### options.moduleName\r\nType: `String` or `Function`\r\n\r\nThe name of the generated AngularJS module. Uses the file url if omitted.\r\n\r\nWhen this is a function, the returned value will be the module name.  The function will be passed the vinyl file object so the module name can be determined from the path, content, last access time or any other property.  Returning `undefined` will fall back to the file url.\r\n\r\n#### options.declareModule\r\nType: `Boolean`\r\n\r\nWhether to attempt to declare a new module (used with options.moduleName).  True if omitted.\r\n\r\nSet this to false if options.moduleName is already declared.\r\n\r\n#### options.prefix\r\nType: `String`\r\n\r\nThe prefix which should be prepended to the file path to generate the file url.\r\n\r\n#### options.stripPrefix\r\nType: `String`\r\n\r\nThe prefix which should be subtracted from the file path to generate the file url.\r\n\r\n#### options.rename\r\nType: `Function`\r\n\r\nA function that allows the generate file url to be manipulated. For example:\r\n\r\n``` javascript\r\nfunction (templateUrl, templateFile) {\r\n  return templateUrl.replace('.tpl.html', '.html');\r\n}\r\n```\r\n\r\n#### options.template\r\nType: `String`\r\n\r\nA custom Lodash template for generating the Javacript code. The template is called with the following params:\r\n\r\n- moduleName: the resulting module name.\r\n- template\r\n    * url: the resulting template url.\r\n    * content: the HTML content of the input file.\r\n    * escapedContent: the escaped HTML content of the input file. Note: the HTML content is escaped for usage in a single quoted string.\r\n    * prettyEscapedContent: the readable, escaped HTML content of the input file.\r\n\r\n\r\nExample\r\n\r\n``` javascript\r\n{\r\n  template: \"$templateCache.put('<%= template.url %>', '<%= template.escapedContent %>');\"\r\n}\r\n```\r\n\r\n#### options.extension\r\nType: `String`\r\n\r\nThe file extension of the generated files. Defaults to .js. Can be used to generate TypeScript files and create a gulp TypeScript - job to convert them. For a working example take a look at [angular-systemjs-typescript-boilerplate](https://github.com/INSPIRATIONlabs/angular-systemjs-typescript-boilerplate)\r\n\r\n### options.export\r\nType: `String`\r\n\r\n* `commonjs`: export the angular module using `module.exports =`\r\n* `system`: export the angular module using `export default`\r\n\r\n> Note this does not export anything with `declareModule` set to `true`.\r\n\r\nExample\r\n\r\n``` javascript\r\n{\r\n  export: 'commonjs'\r\n}\r\n```\r\n\r\n``` javascript\r\n{\r\n  export: 'system'\r\n}\r\n```\r\n\r\n## License\r\n\r\n[MIT License](http://en.wikipedia.org/wiki/MIT_License)\r\n\r\n[npm-url]: https://npmjs.org/package/gulp-ng-html2js\r\n[npm-image]: https://badge.fury.io/js/gulp-ng-html2js.png\r\n\r\n[travis-url]: http://travis-ci.org/marklagendijk/gulp-ng-html2js\r\n[travis-image]: https://secure.travis-ci.org/marklagendijk/gulp-ng-html2js.png?branch=master\r\n\r\n[depstat-url]: https://david-dm.org/marklagendijk/gulp-ng-html2js\r\n[depstat-image]: https://david-dm.org/marklagendijk/gulp-ng-html2js.png\r\n",
  "readmeFilename": "README.md",
  "_id": "gulp-ng-html2js@0.2.2",
  "_from": "gulp-ng-html2js@^0.2.0"
}
